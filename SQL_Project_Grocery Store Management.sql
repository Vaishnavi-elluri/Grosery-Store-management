CREATE DATABASE grocery_store;
USE grocery_store;

-- CREATING TABLES

-- 1. Supplier Table
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT AUTO_INCREMENT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);

-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT AUTO_INCREMENT PRIMARY KEY,
    cat_name VARCHAR(255)
);

-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT AUTO_INCREMENT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);

-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT AUTO_INCREMENT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
);

-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT AUTO_INCREMENT PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT AUTO_INCREMENT PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- ANALYSIS QUESTIONS
--  Customer Insights
--  1. How many unique customers have placed orders?
SELECT COUNT(DISTINCT cust_id) AS unique_customers
FROM orders;
-- ANS: 156 unique customers 

-- 2. Which customers have placed the highest number of orders?
SELECT 
    c.cust_name,
    SUM(order_total) AS total_spent,
    AVG(order_total) AS avg_spent
FROM customers c
JOIN (
    SELECT o.cust_id, o.ord_id, SUM(od.total_price) AS order_total
    FROM orders o
    JOIN order_details od ON o.ord_id = od.ord_id
    GROUP BY o.ord_id
) AS customer_orders ON c.cust_id = customer_orders.cust_id
GROUP BY c.cust_id
ORDER BY total_spent DESC;

-- 3. What is the total and average purchase value per customer?
SELECT 
    c.cust_name,
    SUM(od.total_price) AS total_purchase,
    AVG(od.total_price) AS avg_purchase
FROM customers c
JOIN orders o ON c.cust_id = o.cust_id
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY c.cust_id;

-- 4. Who are the top 5 customers by total purchase amount?
SELECT c.cust_name, SUM(od.total_price) AS total_spent
FROM customers c
JOIN orders o ON c.cust_id = o.cust_id
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY c.cust_id
ORDER BY total_spent DESC
LIMIT 5;

--  Product Performance
-- 1. How many products exist in each category?
DESCRIBE categories;

SELECT 
    cat.cat_name,
    COUNT(p.prod_id) AS product_count
FROM categories cat
JOIN products p ON cat.cat_id = p.cat_id
GROUP BY cat.cat_id;

-- 2. What is the average price of products by category?
DESCRIBE products;
SELECT 
    cat.cat_name,
    AVG(p.price) AS avg_price
FROM categories cat
JOIN products p ON cat.cat_id = p.cat_id
GROUP BY cat.cat_id;

-- 3. Which products have the highest total sales volume (by quantity)?
SELECT 
    p.prod_name,
    SUM(od.quantity) AS total_quantity_sold
FROM order_details od
JOIN products p ON od.prod_id = p.prod_id
GROUP BY od.prod_id
ORDER BY total_quantity_sold DESC
LIMIT 5

-- 4. What is the total revenue generated by each product?
SELECT 
    p.prod_name,
    SUM(od.total_price) AS total_revenue
FROM order_details od
JOIN products p ON od.prod_id = p.prod_id
GROUP BY od.prod_id
ORDER BY total_revenue DESC;

-- 5.How do product sales vary by category and supplier?
desc supplier;
SELECT 
    c.cat_name AS category,
    s.sup_name AS supplier,
    SUM(od.total_price) AS total_revenue
FROM order_details od
JOIN products p ON od.prod_id = p.prod_id
JOIN categories c ON p.cat_id = c.cat_id
JOIN supplier s ON p.sup_id = s.sup_id
GROUP BY c.cat_name, s.sup_name
ORDER BY category, total_revenue DESC;

-- Sales and Order Trends
-- 1.How many orders have been placed in total?
SELECT COUNT(*) AS total_orders FROM orders;
-- Ans. 300 orders have been placed in total.

-- 2. What is the average value per order?
SELECT 
    AVG(order_total) AS avg_order_value
FROM (
    SELECT 
        ord_id, 
        SUM(total_price) AS order_total
    FROM order_details
    GROUP BY ord_id
) AS totals;

-- 3.On which dates were the most orders placed?
SELECT 
    order_date, 
    COUNT(*) AS order_count
FROM orders
GROUP BY order_date
ORDER BY order_count DESC
LIMIT 5;
-- ANS: On 9th Oct and 30th Mar had the highest number of orders.

-- 4. What are the monthly trends in order volume and revenue?
SELECT 
    DATE_FORMAT(STR_TO_DATE(o.order_date, '%m/%d/%Y'), '%Y-%m') AS order_month,
    COUNT(DISTINCT o.ord_id) AS total_orders,
    SUM(od.total_price) AS total_revenue
FROM orders o
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY order_month
ORDER BY order_month;

-- 5.How do order patterns vary across weekdays and weekends?
SELECT 
    DAYNAME(STR_TO_DATE(order_date, '%m/%d/%Y')) AS day_of_week,
    COUNT(*) AS total_orders
FROM orders
GROUP BY day_of_week
ORDER BY FIELD(day_of_week, 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday');
  /* ANS: Orders are significantly higher on weekdays than weekends, 
	with the highest activity on Friday and Wednesday*/

-- Supplier Contribution
-- 1.How many suppliers are there in the database?
SELECT COUNT(*) FROM supplier;
-- ANS: 5 suppliers are there in database.

-- 2. Which supplier provides the most products?
SELECT s.sup_name, COUNT(p.prod_id) AS product_count
FROM supplier s
JOIN products p ON s.sup_id = p.sup_id
GROUP BY s.sup_id
ORDER BY product_count DESC
LIMIT 1;
-- ANS: The supplier Aarya provides the most products (e.g., 18 products).

-- 3.What is the average price of products from each supplier?
SELECT s.sup_name, AVG(p.price) AS avg_price
FROM supplier s
JOIN products p ON s.sup_id = p.sup_id
GROUP BY s.sup_id
ORDER BY avg_price DESC;

-- 4. Which suppliers contribute the most to total product sales (by revenue)?
SELECT s.sup_name, SUM(od.total_price) AS total_revenue
FROM supplier s
JOIN products p ON s.sup_id = p.sup_id
JOIN order_details od ON p.prod_id = od.prod_id
GROUP BY s.sup_id
ORDER BY total_revenue DESC;
-- ANS: Aarya is the top contributor to total sales revenue with ₹221137.83.

--  Employee Performance
-- 1. How many employees have processed orders?
SELECT COUNT(DISTINCT emp_id) AS active_employees
FROM orders;
-- ANS: A total of 10 employees have processed orders.

-- 2. Which employees have handled the most orders?
SELECT e.emp_name, COUNT(o.ord_id) AS total_orders
FROM employees e
JOIN orders o ON e.emp_id = o.emp_id
GROUP BY e.emp_id
ORDER BY total_orders DESC
LIMIT 5;
-- ANS: Diya Sharma  has handled the most orders, with a total of 38.

-- 3. What is the total sales value processed by each employee?
SELECT e.emp_name, SUM(od.total_price) AS total_sales
FROM employees e
JOIN orders o ON e.emp_id = o.emp_id
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY e.emp_id
ORDER BY total_sales DESC;

-- 4. What is the average order value handled per employee?
SELECT 
    e.emp_name, 
    AVG(od.total_price) AS avg_order_value
FROM employees e
JOIN orders o ON e.emp_id = o.emp_id
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY e.emp_id
ORDER BY avg_order_value DESC;

-- Order Details Deep Dive
-- 1. What is the relationship between quantity ordered and total price?
SELECT quantity, total_price
FROM order_details;
/* ANS: There is a direct positive relationship 
between quantity ordered and total price — 
higher quantities lead to higher total amounts.*/

-- 2. What is the average quantity ordered per product?
SELECT p.prod_name, AVG(od.quantity) AS avg_quantity
FROM products p
JOIN order_details od ON p.prod_id = od.prod_id
GROUP BY p.prod_id
ORDER BY avg_quantity DESC;

-- 3. How does the unit price vary across products and orders?
SELECT p.prod_name, od.each_price
FROM products p
JOIN order_details od ON p.prod_id = od.prod_id
ORDER BY p.prod_name;
/* ANS: The unit price remains consistent across orders for each product, 
indicating fixed pricing without variations.*/



































